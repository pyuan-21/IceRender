/*SSAO only works for deferred shading*/
/*refer: "Hardware Accelerated Ambient Occlusion Techniques on GPUs"(SSAO) [Perumaal Shanmugam & Okan Arikan. 2007]*/
#version 450 core

#ifndef PI
#define PI 3.1415926538
#endif

uniform float ssaoOccluderRadius; /*occluder radius*/
uniform float ssaoDistanceFar; /*maximum radius for checking whether neighbor pixel is an occluder*/

/*neccessary input from deferred shading fragment shader: */
in vec2 fUV; /*- fUV (uv coordinate from screen quad)*/
uniform sampler2D posTex; /*- posTex (position texture in world space)*/
uniform sampler2D normalTex; /*- normalTex (normal texture in world space)*/

/* output */
layout (location = 0) out float aoTex;

/* global variables */
vec2 texelSize;
vec3 fPos, fNormal;

float ComputeAO(float i, float j)
{
    vec2 occluderUV = fUV+vec2(i,j)*texelSize; /*find current pixel's neighbor over a kernel as occluder*/
    float flag = texture(normalTex, occluderUV).a;
    /*There are two cases that we don't need to handle occlusion:*/
    /*(1) no information drawn in this neighbor fragment.*/
    /*(2) neighbor fragment is outside of screen space.*/
    if(flag == 0)
        return 0; /*Both cases above can be checked by using w*/
    
    vec3 offset = -0.02*fNormal; //TODO: important

    vec3 occluderPos = texture(posTex, occluderUV).rgb + offset;
    vec3 PC = occluderPos - fPos; /*PC is the vector from current fPos to occluder*/
    float lenPC = length(PC);

    if(lenPC > ssaoDistanceFar)
        return 0;
    
    //TODO: above comparision is weird, even if ssaoDistanceFar is 0, it's still true??
    vec3 dirPC = normalize(PC);
    float nDotPC = dot(fNormal, dirPC);/*if angle between PC and N is larger than 90, nDotPC will be negative*/
    //TODO? move neighbor point a little bit along with the direction from camera to this neighbor point to avoid parallel influence?
    //if(nDotPC <= 0.1)
        //continue;


    /*once reach here, it becomes an occluder*/
    /*make sure ssaoOccluderRadius/lenPC won't greater than 1*/
    float occluderArea = 2*PI*(1-cos(asin(min(ssaoOccluderRadius / lenPC, 1.0))));
    //ambientOcclusion += occluderArea * nDotPC;
    //ambientOcclusion += occluderArea * max(nDotPC, 0);
    
    return occluderArea * max(nDotPC, 0);
}

void main()
{
	fPos = texture(posTex, fUV).rgb;
    vec4 temp = texture(normalTex, fUV);
	float flag = temp.w;
	if(flag == 0)
    {
        aoTex = 0;
		discard; // no information in this fragment.
    }
	
	fNormal = temp.xyz;

    vec2 texSize = textureSize(posTex, 0); /*take the size from mipmap at level=0*/
	texelSize = 1.0/texSize;
    float ambientOcclusion = 0.0;

#iteration:#iterVarInit:##iterVarMax:##iterVarStep:##iterVarInit:##iterVarMax:##iterVarStep:##function:    ambientOcclusion += ComputeAO(#iterVar:0#, #iterVar:1#);## 

    aoTex = ambientOcclusion;
}