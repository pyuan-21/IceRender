/* This file is automatically generated by "Resources/Shaders/Filters/Gaussian/gaussianFilter_Float.iter_fs". */
/* This file is automatically generated by "Resources/Shaders/Filters/Gaussian/Generator/gaussianFilter_Template.iter_fs". */
/* This file is automatically generated by "Resources/Shaders/Filters/Gaussian/Generator/gaussian_filter_generator.py". */
#version 450 core

in vec2 fUV; /*screen quad UV coordinates.*/
uniform sampler2D inputTex; /*- texture needed to be filtered */

layout (location = 0) out float result; /* output */

int _GetStartIndex(int row_index)
{
	int startIndex = 0;
	for(int i=0;i<row_index;i++)
			startIndex += (3-i);
	return startIndex;
}

int GetWeightIndex(int x, int y)
{
	/* please check "Resources/Shaders/Filters/Gaussian/Generator/gaussian_filter_generator.py" */
	int absX = abs(x);
	int absY = abs(y);
	if(absY < absX)
	{
		int temp = absX;
		absX = absY;
		absY = temp;
	}
		return _GetStartIndex(2 - absY) + absX;
}

void main()
{
    vec2 texSize = textureSize(inputTex, 0); /*take the size from mipmap at level=0*/
	vec2 texelSize = 1.0/texSize;
    float sum = 0;
	float kernel[6] = { 0.0, 0.0204081632653, 0.0408163265306, 0.0612244897959, 0.0816326530612, 0.102040816327 };
/*--------------------------------------------------------*/
/* below codes are generated by "unroll_shader" command.*/
    sum += kernel[GetWeightIndex(int(-2.000000), int(-2.000000))] * texture(inputTex, fUV+vec2(-2.000000, -2.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(-2.000000), int(-1.000000))] * texture(inputTex, fUV+vec2(-2.000000, -1.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(-2.000000), int(0.000000))] * texture(inputTex, fUV+vec2(-2.000000, 0.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(-2.000000), int(1.000000))] * texture(inputTex, fUV+vec2(-2.000000, 1.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(-2.000000), int(2.000000))] * texture(inputTex, fUV+vec2(-2.000000, 2.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(-1.000000), int(-2.000000))] * texture(inputTex, fUV+vec2(-1.000000, -2.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(-1.000000), int(-1.000000))] * texture(inputTex, fUV+vec2(-1.000000, -1.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(-1.000000), int(0.000000))] * texture(inputTex, fUV+vec2(-1.000000, 0.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(-1.000000), int(1.000000))] * texture(inputTex, fUV+vec2(-1.000000, 1.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(-1.000000), int(2.000000))] * texture(inputTex, fUV+vec2(-1.000000, 2.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(0.000000), int(-2.000000))] * texture(inputTex, fUV+vec2(0.000000, -2.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(0.000000), int(-1.000000))] * texture(inputTex, fUV+vec2(0.000000, -1.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(0.000000), int(0.000000))] * texture(inputTex, fUV+vec2(0.000000, 0.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(0.000000), int(1.000000))] * texture(inputTex, fUV+vec2(0.000000, 1.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(0.000000), int(2.000000))] * texture(inputTex, fUV+vec2(0.000000, 2.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(1.000000), int(-2.000000))] * texture(inputTex, fUV+vec2(1.000000, -2.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(1.000000), int(-1.000000))] * texture(inputTex, fUV+vec2(1.000000, -1.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(1.000000), int(0.000000))] * texture(inputTex, fUV+vec2(1.000000, 0.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(1.000000), int(1.000000))] * texture(inputTex, fUV+vec2(1.000000, 1.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(1.000000), int(2.000000))] * texture(inputTex, fUV+vec2(1.000000, 2.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(2.000000), int(-2.000000))] * texture(inputTex, fUV+vec2(2.000000, -2.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(2.000000), int(-1.000000))] * texture(inputTex, fUV+vec2(2.000000, -1.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(2.000000), int(0.000000))] * texture(inputTex, fUV+vec2(2.000000, 0.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(2.000000), int(1.000000))] * texture(inputTex, fUV+vec2(2.000000, 1.000000)*texelSize).r;
    sum += kernel[GetWeightIndex(int(2.000000), int(2.000000))] * texture(inputTex, fUV+vec2(2.000000, 2.000000)*texelSize).r;
/*--------------------------------------------------------*/
	result = sum;
}
	
