/* This file is automatically generated by "Resources/Shaders/Filters/Rect/rectFilter_Float.iter_fs". */
#version 450 core

in vec2 fUV; /*screen quad UV coordinates.*/
uniform sampler2D inputTex; /*- texture needed to be filtered */

layout (location = 0) out float result; /* output */

void main()
{
    vec2 texSize = textureSize(inputTex, 0); /*take the size from mipmap at level=0*/
	vec2 texelSize = 1.0/texSize;
    float sum = 0, count = 0;

/*--------------------------------------------------------*/
/* below codes are generated by "unroll_shader" command.*/
	sum += texture(inputTex, fUV+vec2(-3.000000,-3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-3.000000,-2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-3.000000,-1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-3.000000,0.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-3.000000,1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-3.000000,2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-3.000000,3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-2.000000,-3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-2.000000,-2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-2.000000,-1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-2.000000,0.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-2.000000,1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-2.000000,2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-2.000000,3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-1.000000,-3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-1.000000,-2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-1.000000,-1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-1.000000,0.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-1.000000,1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-1.000000,2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(-1.000000,3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(0.000000,-3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(0.000000,-2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(0.000000,-1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(0.000000,0.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(0.000000,1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(0.000000,2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(0.000000,3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(1.000000,-3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(1.000000,-2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(1.000000,-1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(1.000000,0.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(1.000000,1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(1.000000,2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(1.000000,3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(2.000000,-3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(2.000000,-2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(2.000000,-1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(2.000000,0.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(2.000000,1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(2.000000,2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(2.000000,3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(3.000000,-3.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(3.000000,-2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(3.000000,-1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(3.000000,0.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(3.000000,1.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(3.000000,2.000000)*texelSize).r; count+=1;
	sum += texture(inputTex, fUV+vec2(3.000000,3.000000)*texelSize).r; count+=1;
/*--------------------------------------------------------*/

    result = sum/count;
}

