#version 450 core
#pragma optionNV (unroll all)

/*screen quad UV coordinates.*/
in vec2 fUV;

/*G-buffers as input*/
uniform sampler2D posTex;
uniform sampler2D normalTex;
uniform sampler2D albedoTex;
uniform sampler2D matTex;
uniform sampler2D aoTex;


/*matrix*/
uniform mat4 viewMat;

/*ambient*/
uniform vec3 ambientLight;

/*lights*/
uniform int activeLightNum;
const int maxLightNum = 5; /*TODO:don't forget to modify its corresponding variable in SceneManager*/
struct Light
{
	int type;
	vec3 color, pos, dir; /*color, position, direction*/
	float intensity;
	vec2 attenuation;
	/*shadow relevant*/
	int renderShadow;
};
uniform Light lights[maxLightNum];

/* declared before #import */
vec3 fPos; // it will used in below #import
vec3 fNormal; // it will used in below #import ssao

/*import sub shader from other file*/
#import:"VarianceShadowMap/lightRatio_deferred_shading.sub_fs"#

out vec4 colorResponse;

void main()
{
	vec4 temp = texture(normalTex, fUV);
	float flag = temp.w;
	if(flag == 0)
		discard; // no information in this fragment.
	
	// TODO: first to test above texture correctness by outputing above texture
	fPos = texture(posTex, fUV).rgb;
	fNormal = temp.xyz;
	vec3 albedo = texture(albedoTex, fUV).rgb;
	vec4 material = texture(matTex, fUV);
	float ka = material.r;
	float kd = material.g;
	float ks = material.b;
	float shiness = material.a;

	// TODO: below code are copied from phong_vsm.main_fs, check it

	vec3 ePos = (viewMat*vec4(fPos, 1)).xyz; /*vertex position in eye space*/

	vec3 lRes = vec3(0); /*lighting response*/

	vec3 ambient = ambientLight*ka;

	for(int i=0;i<activeLightNum;i++)
	{
		/*lighting computation is in "eye space"*/
		Light light = lights[i];
		float lI = light.intensity;
		vec3 lPos = (viewMat*vec4(light.pos, 1)).xyz;
		vec3 lDir;
		if(light.type == 0)
		{
			/*point light*/ 
			lDir = lPos - ePos;
			float d = length(lDir);
			lI *= 1.0 / (1 + d*light.attenuation.x + pow(d,2)*light.attenuation.y);
		}
		else if(light.type == 1)
		{
			lDir = (viewMat*vec4(light.dir, 0)).xyz;
		}
		lDir = normalize(lDir);
		vec3 lC = light.color*lI; /*light color(or color intensity) at this vertex.*/
		
		/*refer: https://en.wikipedia.org/wiki/Phong_reflection_model, but I have my own modification*/
		/*fNormal here is already being taken into account non-uniform scaling. Check "gbuffers.fs"*/
		vec3 eN = normalize((viewMat*vec4(fNormal, 0)).xyz);

		/*diffuse*/ 
		/*use 0 for normal's forth component in homogenous coordinate, cause translation should not be applied to normal vector*/
		vec3 diffuse = vec3(0);		
		float lDirDotN = dot(lDir,eN);
		if(lDirDotN > 0)
			/*albedo and incoming light control the color response at this vertex point*/
			diffuse = kd*lDirDotN*lC;

		/*specular*/
		vec3 specular = vec3(0);
		vec3 lRef = normalize(2*lDirDotN*eN-lDir); /*light reflection direction*/
		vec3 eV = normalize(-ePos); /*eye view direction at this vertex. In eye space, camera is at origin*/
		float lRefDotN = dot(lRef, eV);
		if(lRefDotN > 0)
			specular = ks*pow(lRefDotN, shiness)*lC;

		/*shadow is the result of light source(direct light), not ambient(indirect light)*/
		vec3 sum = diffuse + specular;
		float lightRatio = 1.0;
		if(light.renderShadow == 1)
		{
			// below code line("ComputeLightRatio") is defined in sub shader "VarianceShadowMap/lightRatio.sub_fs"
			lightRatio = ComputeLightRatio(lightCamInfos[i], shadowMaps[i], SATMaps[i]);
		}

		lRes += (sum*lightRatio);
	}

	lRes += ambient;
	lRes *= albedo; /*albedo determines how much lighting reflect from the surface*/

	float ambientOcclusion = texture(aoTex, fUV).r;
	colorResponse = vec4(lRes*(1.0 - ambientOcclusion), 1);
	//colorResponse = vec4(lRes, 1);


	// TODO: remove below unnecessary codes
	//colorResponse = vec4(vec3(ambientOcclusion), 1.0);
	//colorResponse = vec4(lRes, 1);
	//colorResponse = vec4(clamp(vec3(1)-vec3(ambientOcclusion), vec3(0), vec3(1)), 1.0);
}